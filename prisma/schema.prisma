generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id       Int       @id @default(autoincrement())
  nombre   String
  correo   String    @unique
  password String
  rol      String
  reportes Reporte[]

  @@map("usuario")
}

model Reporte {
  id                  Int         @id @default(autoincrement())
  fecha               DateTime    @default(now())
  calificacionGeneral Float
  usuarioId           Int
  usuario             Usuario     @relation(fields: [usuarioId], references: [id])
  respuestas          Respuesta[]
}

model Seccion {
  id        Int        @id @default(autoincrement())
  nombre    String
  preguntas Pregunta[]
}

model Pregunta {
  id         Int         @id @default(autoincrement())
  texto      String
  seccionId  Int
  opciones   String
  seccion    Seccion     @relation(fields: [seccionId], references: [id])
  respuestas Respuesta[]
}

model Respuesta {
  id           Int      @id @default(autoincrement())
  reporteId    Int
  preguntaId   Int
  respuesta    String
  calificacion Float
  pregunta     Pregunta @relation(fields: [preguntaId], references: [id])
  reporte      Reporte  @relation(fields: [reporteId], references: [id])
}

model Visita {
  id                  Int             @id @default(autoincrement())
  suscriptor          String
  asegurado           String
  direccion           String
  ciudad              String
  municipio           String
  estado              String
  cobertura           String
  giro                String
  fechaSolicitud      DateTime
  fechaVisita         DateTime?
  estatus             String          @default("En espera")
  latitud             Float?
  longitud            Float?
  tipoMoneda          String?
  cp                  String?
  ingeniero           String?
  fechaCancelacion    DateTime?
  fechaVisitada       DateTime?
  correoSuscriptor    String?
  telSuscriptor       String?
  coordinador         String?
  correoCoordinador   String?
  telCoordinador      String?
  territorial         String?
  territorialOtra     String?
  representante       String?
  correoRepresentante String?
  telRepresentante    String?
  compartirCon        Json?
  razonSocial         String?
  usoReporte          String?
  poliza              String?
  tipoNegocio         String?
  tipoVisita          String?
  vigenciaInicio      DateTime?
  vigenciaTermino     DateTime?
  contactos           Contacto[]      @relation("VisitaContactos")
  rubrosInteres       RubrosInteres[] @relation("VisitaRubros")
  ubicaciones         Ubicacion[]     @relation("VisitaUbicaciones")
}

model Contacto {
  id       Int    @id @default(autoincrement())
  nombre   String
  correo   String
  telefono String
  puesto   String
  tipo     String
  visitaId Int
  visita   Visita @relation("VisitaContactos", fields: [visitaId], references: [id])
}

model Ubicacion {
  id         Int     @id @default(autoincrement())
  direccion  String
  estado     String
  municipio  String
  cp         String?
  suma       String?
  tipoMoneda String?
  latitud    Float?
  longitud   Float?
  visitaId   Int
  visita     Visita  @relation("VisitaUbicaciones", fields: [visitaId], references: [id])
}

model RubrosInteres {
  id          Int    @id @default(autoincrement())
  descripcion String
  visitaId    Int
  visita      Visita @relation("VisitaRubros", fields: [visitaId], references: [id])
}
